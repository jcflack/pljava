language: minimal
os:
  - linux
arch:
  - amd64
  - ppc64le
dist: bionic
env:
  - POSTGRESQL_VERSION: 13
    JAVA_VERSION: 15
    JVM_IMPL: hotspot
    MVN_VERSION: 3.5.2
  - POSTGRESQL_VERSION: 12
    JAVA_VERSION: 14
    JVM_IMPL: hotspot
    MVN_VERSION: 3.5.2
  - POSTGRESQL_VERSION: 12
    JAVA_VERSION: 14
    JVM_IMPL: openj9
    MVN_VERSION: 3.6.3
  - POSTGRESQL_VERSION: 12
    JAVA_VERSION: 11
    JVM_IMPL: hotspot
    MVN_VERSION: 3.6.3
  - POSTGRESQL_VERSION: 12
    JAVA_VERSION: 9
    JVM_IMPL: hotspot
    MVN_VERSION: 3.6.3
  - POSTGRESQL_VERSION: 10
    JAVA_VERSION: 14
    JVM_IMPL: hotspot
    MVN_VERSION: 3.6.3
  - POSTGRESQL_VERSION: 9.5
    JAVA_VERSION: 14
    JVM_IMPL: hotspot
    MVN_VERSION: 3.6.3

jobs:
  exclude:
    - arch: ppc64le
      env:
        POSTGRESQL_VERSION: 12
        JAVA_VERSION: 9
        JVM_IMPL: hotspot
        MVN_VERSION: 3.6.3
  include:
    - os: osx
      osx_image: xcode11
      arch: amd64
      env:
        - POSTGRESQL_VERSION: 11
          JAVA_VERSION: 14
          JVM_IMPL: hotspot
          MVN_VERSION: 3.6.3
    - os: osx
      osx_image: xcode11
      arch: amd64
      env:
        - POSTGRESQL_VERSION: 10
          JAVA_VERSION: 14
          JVM_IMPL: hotspot
          MVN_VERSION: 3.6.3
    - os: osx
      osx_image: xcode11
      arch: amd64
      env:
        - POSTGRESQL_VERSION: 9.5
          JAVA_VERSION: 14
          JVM_IMPL: hotspot
          MVN_VERSION: 3.6.3

cache:
  directories:
    - $HOME/.m2

before_install: |
  javaUrl=https://api.adoptopenjdk.net/v3/binary/latest
  javaUrl="$javaUrl/$JAVA_VERSION/ga/${TRAVIS_OS_NAME//osx/mac}"
  javaUrl="$javaUrl/${TRAVIS_CPU_ARCH//amd64/x64}/jdk"
  javaUrl="$javaUrl/$JVM_IMPL/normal/adoptopenjdk"

  installJdk=$(false && which install-jdk.sh) || {
    wget https://raw.githubusercontent.com/sormuras/bach/8c457fd6e46bd9f3f575867dd0c9af1d7edfd5b4/install-jdk.sh
    installJdk=./install-jdk.sh

    printf '%s\n%s\n%s\n%s\n%s\n' \
      '--- install-jdk.sh' \
      '+++ install-jdk.sh' \
      '@@ -257 +257 @@' \
      '-            target="${workspace}"/$(tar --list ${tar_options} | head -2 | tail -1 | cut -f 2 -d '"'/' -)/Contents/Home" \
      '+            target="${workspace}"/$(tar --list ${tar_options} | sed -n '"'/\/bin\/javac/s///p')" \
    | patch "$installJdk"
  }

  [[ $JAVA_VERSION == 9 ]] && certs=--cacerts || unset certs

  . "$installJdk" --url "$javaUrl" ${certs+"$certs"}

  mvnUrl=https://archive.apache.org/dist/maven/maven-3
  mvnUrl="$mvnUrl/$MVN_VERSION/binaries/apache-maven-$MVN_VERSION-bin.tar.gz"

  wget --no-verbose "$mvnUrl" && tar xzf "apache-maven-$MVN_VERSION-bin.tar.gz"
  mvn="./apache-maven-$MVN_VERSION/bin/mvn"
  "$mvn" --version

  . .travis/travis_install_postgresql.sh

install: |
  "$pgConfig"

  if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      libjvm_name="libjli.dylib"
  else
      libjvm_name="libjvm.so"
  fi
  libjvm=$(find "$JAVA_HOME" -mindepth 2 -name $libjvm_name | head -n 1)

  "$mvn" clean install --batch-mode \
   -Dpgsql.pgconfig="$pgConfig" \
   -Dpljava.libjvmdefault="$libjvm" \
   -Psaxon-examples -Ppgjdbc-ng \
   -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

script: |
  packageJar=$(find pljava-packaging -name pljava-pg*.jar -print)

  mavenRepo="$HOME/.m2/repository"

  saxonVer=$(
    find "$mavenRepo/net/sf/saxon/Saxon-HE" -name 'Saxon-HE-*.jar' -print |
    sort |
    tail -n 1
  )
  saxonVer=${saxonVer%/*}
  saxonVer=${saxonVer##*/}

  jdbcJar=$(
    find "$mavenRepo/com/impossibl/pgjdbc-ng/pgjdbc-ng-all" \
      -name 'pgjdbc-ng-all-*.jar' -print |
    sort |
    tail -n 1
  )

  sudo "$JAVA_HOME"/bin/java -Dpgconfig="$pgConfig" -jar "$packageJar"

  "$JAVA_HOME"/bin/jshell \
    -execution local \
    "-J--class-path=$packageJar:$jdbcJar" \
    "--class-path=$packageJar" \
    "-J--add-modules=java.sql.rowset" \
    "-J-Dpgconfig=$pgConfig" \
    "-J-Dcom.impossibl.shadow.io.netty.noUnsafe=true" \
    "-J-DmavenRepo=$mavenRepo" \
    "-J-DsaxonVer=$saxonVer" - <<\ENDJSHELL && # continues after here document

  boolean succeeding = false; // begin pessimistic

  import static java.nio.file.Files.createTempFile
  import static java.nio.file.Files.write
  import java.nio.file.Path
  import static java.nio.file.Paths.get
  import java.sql.Connection
  import java.sql.PreparedStatement
  import java.sql.ResultSet
  import org.postgresql.pljava.packaging.Node
  import static org.postgresql.pljava.packaging.Node.q
  import static org.postgresql.pljava.packaging.Node.stateMachine
  import static org.postgresql.pljava.packaging.Node.isVoidResultSet

  String vmopts = "-enableassertions:org.postgresql.pljava... -Xcheck:jni"

  Node n1 = Node.get_new_node("TestNode1")

  /*
   * Keep a tally of the three types of diagnostic notices that may be received,
   * and, independently, how many represent no-good test results (error always,
   * but also warning if seen from the tests in the examples.jar deployment
   * descriptor).
   */
  Map<String,Integer> results =
    Stream.of("info", "warning", "error", "ng").collect(
      LinkedHashMap<String,Integer>::new, (m,k) -> m.put(k, 0), (r,s) -> {})

  boolean isDiagnostic(Object o, Set<String> whatIsNG)
  {
    if ( ! ( o instanceof Throwable ) )
      return false;
    String[] parts = Node.classify((Throwable)o);
    String type = parts[0];
    results.compute(type, (k,v) -> 1 + v);
    if ( whatIsNG.contains(type) )
      results.compute("ng", (k,v) -> 1 + v);
    return true;
  }

  try (
    AutoCloseable t1 = n1.initialized_cluster();
    AutoCloseable t2 = n1.started_server(Map.of(
      "client_min_messages", "info",
      "pljava.vmoptions", vmopts
    ));
  )
  {
    try ( Connection c = n1.connect() )
    {
      succeeding = true; // become optimistic, will be using &= below

      succeeding &= stateMachine(
        "create extension no result",
        null,

        q(c, "create extension pljava")
        .flatMap(Node::semiFlattenDiagnostics)
        .peek(Node::peek),

        // state 1: consume any diagnostics, or go to state 2 without consuming
        (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 1 : -2,

        // state 2: must be end of input
        (o,p,q) -> null == o
      );
    }

    /*
     * Get a new connection; 'create extension' always sets a near-silent
     * logging level, and PL/Java only checks once at VM start time, so in
     * the same session where 'create extension' was done, logging is
     * somewhat suppressed.
     */
    try ( Connection c = n1.connect() )
    {
      succeeding &= stateMachine(
        "saxon path examples path",
        null,

        Node.installSaxonAndExamplesAndPath(c,
          System.getProperty("mavenRepo"),
          System.getProperty("saxonVer"),
          true)
        .flatMap(Node::semiFlattenDiagnostics)
        .peek(Node::peek),

        // states 1,2: maybe diagnostics, then a void result set (saxon install)
        (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 1 : -2,
        (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,

        // states 3,4: maybe diagnostics, then a void result set (set classpath)
        (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 3 : -4,
        (o,p,q) -> isVoidResultSet(o, 1, 1) ? 5 : false,

        // states 5,6: maybe diagnostics, then void result set (example install)
        (o,p,q) -> isDiagnostic(o, Set.of("error", "warning")) ? 5 : -6,
        (o,p,q) -> isVoidResultSet(o, 1, 1) ? 7 : false,

        // states 7,8: maybe diagnostics, then a void result set (set classpath)
        (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 7 : -8,
        (o,p,q) -> isVoidResultSet(o, 1, 1) ? 9 : false,

        // state 9: must be end of input
        (o,p,q) -> null == o
      );

      /*
       * Exercise TrialPolicy some. Need another connection to change
       * vmoptions. Uses some example functions, so insert here before the
       * test of undeploying the examples.
       */
      try ( Connection c2 = n1.connect() )
      {
        Path trialPolicy =
          createTempFile(n1.data_dir().getParent(), "trial", "policy");

        write(trialPolicy, List.of(
          "grant {",
          "  permission",
          "    org.postgresql.pljava.policy.TrialPolicy$Permission;",
          "};"
        ));

        PreparedStatement setVmOpts = c2.prepareStatement(
          "SELECT null::pg_catalog.void" +
          " FROM pg_catalog.set_config('pljava.vmoptions', ?, false)"
        );

        setVmOpts.setString(1, vmopts +
          " -Dorg.postgresql.pljava.policy.trial=" + trialPolicy.toUri());

        succeeding &= stateMachine(
          "change pljava.vmoptions",
          null,

          q(setVmOpts, setVmOpts::execute)
          .flatMap(Node::semiFlattenDiagnostics)
          .peek(Node::peek),

          (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 1 : -2,
          (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
          (o,p,q) -> null == o
        );

        PreparedStatement tryForbiddenRead = c2.prepareStatement(
          "SELECT" +
          "  CASE WHEN javatest.java_getsystemproperty('java.home')" +
          "    OPERATOR(pg_catalog.=) ?" +
          "  THEN javatest.logmessage('INFO', 'trial policy test ok')" +
          "  ELSE javatest.logmessage('WARNING', 'trial policy test ng')" +
          "  END"
        );

        tryForbiddenRead.setString(1, System.getProperty("java.home"));

        succeeding &= stateMachine(
          "try to read a forbidden property",
          null,

          q(tryForbiddenRead, tryForbiddenRead::execute)
          .flatMap(Node::semiFlattenDiagnostics)
          .peek(Node::peek),

          (o,p,q) -> isDiagnostic(o, Set.of("error", "warning")) ? 1 : -2,
          (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
          (o,p,q) -> null == o
        );
        // done with connection c2
      }

      /*
       * Also confirm that the generated undeploy actions work.
       */
      succeeding &= stateMachine(
        "remove jar void result",
        null,

        q(c, "SELECT sqlj.remove_jar('examples', true)")
        .flatMap(Node::semiFlattenDiagnostics)
        .peek(Node::peek),

        (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 1 : -2,
        (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
        (o,p,q) -> null == o
      );
    }

    /*
     * Get another new connection and make sure the extension can be loaded
     * in a non-superuser session.
     */
    try ( Connection c = n1.connect() )
    {
      succeeding &= stateMachine(
        "become non-superuser",
        null,

        q(c,
          "CREATE ROLE alice;" +
          "GRANT USAGE ON SCHEMA sqlj TO alice;" +
          "SET SESSION AUTHORIZATION alice")
        .flatMap(Node::semiFlattenDiagnostics)
        .peek(Node::peek),

        (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 1 : -2,
        (o,p,q) -> null == o
      );

      succeeding &= stateMachine(
        "load as non-superuser",
        null,

        q(c, "SELECT null::pg_catalog.void FROM sqlj.get_classpath('public')")
        .flatMap(Node::semiFlattenDiagnostics)
        .peek(Node::peek),

        (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 1 : -2,
        (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
        (o,p,q) -> null == o
      );
    }
  } catch ( Throwable t )
  {
    succeeding = false;
    throw t;
  }

  System.out.println(results);
  succeeding &= (0 == results.get("ng"));
  System.exit(succeeding ? 0 : 1)
  ENDJSHELL
  : travis wants something after the end of the here document
