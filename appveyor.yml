image: Visual Studio 2019
environment:
  APPVEYOR_RDP_PASSWORD: MrRobot@2020
  VCVARSALL: C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat
  matrix:
#   - SYS: MINGW
#     JDK: 9
#     PG: 12
    - SYS: MINGW
      JDK: 10
      PG: 12
    - SYS: MINGW
      JDK: 14
      PG: 12
    - SYS: MINGW
      JDK: 13
      PG: 12
    - SYS: MINGW
      JDK: 12
      PG: 12
    - SYS: MINGW
      JDK: 11
      PG: 12
    - SYS: MSVC
      JDK: 14
      PG: 12
    - SYS: MSVC
      JDK: 13
      PG: 12
    - SYS: MSVC
      JDK: 12
      PG: 12
    - SYS: MSVC
      JDK: 11
      PG: 12
    - SYS: MSVC
      JDK: 10
      PG: 12
#   - SYS: MSVC
#     JDK: 9
#     PG: 12
    - SYS: MSVC
      JDK: 14
      PG: 11
    - SYS: MSVC
      JDK: 14
      PG: 10
    - SYS: MSVC
      JDK: 14
      PG: 9.6
before_build:
  - ps: .appveyor/appveyor_download_java.ps1
  - set JAVA_HOME=%ProgramFiles%\Java\jdk%JDK%
  - path %JAVA_HOME%\bin;%PATH%
  - '"%VCVARSALL%" x86'
  - '"%VCVARSALL%" amd64'
  - ps: $Env:JAVA_HOME = "C:\Program Files\Java\jdk$Env:JDK"
  - ps: $Env:Path = "$Env:JAVA_HOME\bin;" + $Env:Path
build_script:
  - .appveyor\appveyor_mingw_or_msvc.bat
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
test_script:
  - ps: |
      $pgConfig = $Env:pgConfig

      $packageJar = ('pljava-packaging' |
        Get-ChildItem -Recurse -Filter pljava-pg*.jar
      ).FullName

      $mavenRepo = "$env:UserProfile\.m2\repository"

      $saxonVer = (Join-Path $mavenRepo "net\sf\saxon\Saxon-HE" |
        Get-ChildItem -Recurse -Filter Saxon-HE-*.jar |
        Select-Object -Last 1
      ).Directory.Name

      $jdbcJar = (Join-Path $mavenRepo "com\impossibl\pgjdbc-ng\pgjdbc-ng-all" |
        Get-ChildItem -Recurse -Filter pgjdbc-ng-all-*.jar |
        Select-Object -Last 1
      ).FullName

      @'
      boolean succeeding = false; // begin pessimistic

      import static java.nio.file.Paths.get
      import java.sql.Connection
      import org.postgresql.pljava.packaging.Node
      import static org.postgresql.pljava.packaging.Node.q
      import static org.postgresql.pljava.packaging.Node.stateMachine
      import static org.postgresql.pljava.packaging.Node.isVoidResultSet

      System.setErr(System.out); // PowerShell makes a mess of stderr output

      Node.main(new String[0]); // Extract the files (with output to stdout)

      String vmopts = "-enableassertions:org.postgresql.pljava... -Xcheck:jni"

      Node n1 = Node.get_new_node("TestNode1")

      n1.use_pg_ctl(true)

      /*
       * Keep a tally of the three types of diagnostic notices that may be
       * received, and, independently, how many represent no-good test results
       * (error always, but also warning if seen from the tests in the
       * examples.jar deployment descriptor).
       */
      Map<String,Integer> results =
        Stream.of("info", "warning", "error", "ng").collect(
          LinkedHashMap<String,Integer>::new, (m,k) -> m.put(k, 0), (r,s) -> {})

      boolean isDiagnostic(Object o, Set<String> whatIsNG)
      {
        if ( ! ( o instanceof Throwable ) )
          return false;
        String[] parts = Node.classify((Throwable)o);
        String type = parts[0];
        results.compute(type, (k,v) -> 1 + v);
        if ( whatIsNG.contains(type) )
          results.compute("ng", (k,v) -> 1 + v);
        return true;
      }

      try (
        AutoCloseable t1 = n1.initialized_cluster(
          p->p.redirectErrorStream(true));
        AutoCloseable t2 = n1.started_server(Map.of(
          "client_min_messages", "info",
          "pljava.vmoptions", vmopts
        ), p->p.redirectErrorStream(true));
      )
      {
        try ( Connection c = n1.connect() )
        {
          succeeding = true; // become optimistic, will be using &= below

          succeeding &= stateMachine(
            "create extension no result",
            null,

            q(c, "create extension pljava")
            .flatMap(Node::semiFlattenDiagnostics)
            .peek(Node::peek),

            // state 1: consume any diagnostics, or show same item to state 2
            (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 1 : -2,

            // state 2: must be end of input
            (o,p,q) -> null == o
          );
        }

        /*
         * Get a new connection; 'create extension' always sets a near-silent
         * logging level, and PL/Java only checks once at VM start time, so in
         * the same session where 'create extension' was done, logging is
         * somewhat suppressed.
         */
        try ( Connection c = n1.connect() )
        {
          succeeding &= stateMachine(
            "saxon path examples path",
            null,

            Node.installSaxonAndExamplesAndPath(c,
              System.getProperty("mavenRepo"),
              System.getProperty("saxonVer"),
              true)
            .flatMap(Node::semiFlattenDiagnostics)
            .peek(Node::peek),

            // states 1,2: diagnostics* then a void result set (saxon install)
            (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 1 : -2,
            (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,

            // states 3,4: diagnostics* then a void result set (set classpath)
            (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 3 : -4,
            (o,p,q) -> isVoidResultSet(o, 1, 1) ? 5 : false,

            // states 5,6: diagnostics* then void result set (example install)
            (o,p,q) -> isDiagnostic(o, Set.of("error", "warning")) ? 5 : -6,
            (o,p,q) -> isVoidResultSet(o, 1, 1) ? 7 : false,

            // states 7,8: diagnostics* then a void result set (set classpath)
            (o,p,q) -> isDiagnostic(o, Set.of("error")) ? 7 : -8,
            (o,p,q) -> isVoidResultSet(o, 1, 1) ? 9 : false,

            // state 9: must be end of input
            (o,p,q) -> null == o
          );
        }
      } catch ( Throwable t )
      {
        succeeding = false;
        throw t;
      }

      System.out.println(results);
      succeeding &= (0 == results.get("ng"));
      System.exit(succeeding ? 0 : 1)
      '@ |
      jshell `
        -execution local `
        "-J--class-path=$packageJar;$jdbcJar" `
        "--class-path=$packageJar" `
        "-J--add-modules=java.sql,java.sql.rowset" `
        "-J-Dcom.impossibl.shadow.io.netty.noUnsafe=true" `
        "-J-Dpgconfig=$pgConfig" `
        "-J-DmavenRepo=$mavenRepo" `
        "-J-DsaxonVer=$saxonVer" -
