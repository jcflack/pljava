<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.postgresql</groupId>
		<artifactId>pljava.app</artifactId>
		<version>0.0.2-SNAPSHOT</version>
	</parent>
	<artifactId>pljava-so</artifactId>
	<name>pl/java server side library</name>
	<description>Generates the pljava.so library which gets loaded by the PostgreSQL server.</description>
	<packaging>nar</packaging>

	<build>
		<plugins>

			<!-- Several things that could not be done using Maven plugins. This plugin 
				must be listet FIRST as the pgsql.properties file has to be written before 
				properties-maven-plugin is called, which can apparently also only happen 
				in the "initialize" phase. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<!-- Converts pg_config output to "pgsql.properties" -->
					<execution>
						<id>pg_config to pgsql.properties</id>
						<phase>initialize</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<ant />
							</target>
						</configuration>
					</execution>
					<!-- Deploy the PostgreSQL library by copying it.
					<execution>
						<id>deploy pljava.so</id>
						<phase>deploy</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<copy verbose="true"
									file="${basedir}/target/nar/pljava-so-${project.version}-${nar.aol}-shared/lib/${nar.aol}/shared/libpljava-so-${project.version}.so"
									tofile="${PGSQL_PKGLIBDIR}/pljava.so" />
							</target>
						</configuration>
					</execution> -->
				</executions>
			</plugin>

			<!-- Reads the pg_config properties, which were extracted by an Ant task 
				in the "initialize" phase, into Maven variables. As this plugin seems to 
				get ignored in any phase other than "initialize" it must be listed after 
				the Ant task. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>${basedir}/pgsql.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Compiles and links the C library. -->
			<plugin>
				<groupId>com.github.maven-nar</groupId>
				<artifactId>nar-maven-plugin</artifactId>
				<version>3.1.0</version>
				<extensions>true</extensions>

				<configuration>
					<!-- Generates C header files from Java class files. -->
					<javah>
						<classPaths>
							<classPath>${basedir}/../pljava/target/classes/</classPath>
							<classPath>${basedir}/../pljava-api/target/classes/</classPath>
						</classPaths>
						<classDirectory>${basedir}/../pljava/target/classes/</classDirectory>
						<!-- The following needs https://github.com/maven-nar/maven-nar-plugin/pull/22 -->
						<extraClasses>
							<extraClass>java.sql.Types</extraClass>
						</extraClasses>
					</javah>

					<!-- Compiles the C sources to object files. -->
					<c>
				<!-- uncomment the next line if you need to configure your compiler (e.g. clang)
						<name>${CPP_COMPILER}</name>
				-->
						<defines>
							<define>PKGLIBDIR="target/lib/"</define>
							<define>PGSQL_MAJOR_VER=${PGSQL_MAJOR_VER}</define>
							<define>PGSQL_MINOR_VER=${PGSQL_MINOR_VER}</define>
							<define>PGSQL_PATCH_VER=${PGSQL_PATCH_VER}</define>
						</defines>
						<includePaths>
							<!-- TODO: hardcoded paths -->
							<includePath>${PGSQL_INCLUDEDIR}</includePath>
							<includePath>${PGSQL_INCLUDEDIR-SERVER}</includePath>
							<includePath>${basedir}/src/main/include/</includePath>
							<includePath>${basedir}/target/nar/javah-include/</includePath>
						</includePaths>
					</c>

					<!-- Defines linker flags "-ljvm -L.../server" -->
					<linker>
						<libs>
							<lib>
								<name>ecpg</name>
								<type>shared</type>
								<directory>${PGSQL_LIBDIR}</directory>
							</lib>
							<lib>
								<name>pgtypes</name>
								<type>shared</type>
								<directory>${PGSQL_LIBDIR}</directory>
							</lib>
							<lib>
								<name>pq</name>
								<type>shared</type>
								<directory>${PGSQL_LIBDIR}</directory>
							</lib>
						</libs>
					</linker>

					<!-- Builds a *.so library. -->
					<libraries>
						<library>
							<type>shared</type>
							<!-- Do not add "-lstdc++". Adds "-shared-libgcc" though. -->
							<linkCPP>false</linkCPP>
						</library>
					</libraries>
				</configuration>
			</plugin>

			<!-- The deploy goal will be hijacked by an ant task so the original plugin 
				has to be silenced until we actually use it.
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin> -->

		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>properties-maven-plugin</artifactId>
										<versionRange>[1.0-alpha-2,)</versionRange>
										<goals>
											<goal>
												read-project-properties
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-nar-plugin</artifactId>
										<versionRange>[3.1.0]</versionRange>
										<goals>
											<goal>nar-compile</goal>
											<goal>nar-download</goal>
											<goal>nar-gnu-configure</goal>
											<goal>nar-gnu-make</goal>
											<goal>nar-gnu-process</goal>
											<goal>nar-gnu-resources</goal>
											<goal>nar-javah</goal>
											<goal>nar-system-generate</goal>
											<goal>nar-resources</goal>
											<goal>nar-testCompile</goal>
											<goal>nar-testDownload</goal>
											<goal>nar-testUnpack</goal>
											<goal>nar-unpack</goal>
											<goal>nar-validate</goal>
											<goal>nar-vcproj</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
