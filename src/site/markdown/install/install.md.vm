# Installing PL/Java

The PL/Java [build process][bld] using `mvn clean package` produces files
needed to install the language in PostgreSQL, but does not place those
files in their final locations or configure PostgreSQL to use them. (Even
though Maven also has an `install` command, that's not what it does, either.)
Once the build is done, these instructions cover how to make PL/Java available
in your database. 

[bld]: ../build/build.html

The successful build will have produced two important files:

* The PL/Java `jar` file, which contains Java classes, so it is
    architecture-independent. It is built by the `pljava` subproject,
    so if the current directory is the source root where the build was
    done, it will be found in `pljava/target/pljava-\${project.version}.jar`
    with `\${project.version}` replaced in the obvious way,
    for example `${project.version}`.

* The PL/Java native library, which is architecture-specific. Its filename
    extension can depend on the operating system: `.so` on many systems,
    `.dll` on Windows, `.dylib` _todo: say .bundle after issue63 fix merged_
    on Mac OS X / Darwin. It is built by the `pljava-so` subproject. You can
    refer to this file directly where it is created, but you will find it
    at the end of a long and redundant path that contains the project version
    (twice), an "architecture-OS-linker" string (twice), and a build type
    ("shared"), also twice. _Todo: change shared to plugin when issue63 merged_

    An example, for version `${project.version}` and arch-os-linker of
    `amd64-Linux-gpp` is (very deep breath):

    `pljava-so/target/nar/pljava-so-${project.version}-amd64-Linux-gpp-shared/lib/amd64-Linux-gpp/shared/libpljava-so-${project.version}.so`

For convenience, the build also produces either a `.tar.gz` file or a `.zip`
file (depending on the platform) containing both of those files under the
short, reasonable names `pljava/pljava.jar` and `pljava/pljava.so` (or `.dll`,
etc.); just unpack that to put those two files wherever you like. It will be
found as `packaging/target/pljava-${pgversion}-${naraol}.tar.gz` (or `.zip`).

#set($h2 = '##')
$h2 A quick test installation

The `target` directories in your build tree are probably not where you want
those files to be for a real installation, but for a quick test to be sure
PL/Java works, there is no need yet to copy the files to their final locations.
Simply make note of their paths as described above.

You will also have to know the path to your Java runtime's `libjvm`
shared library. To find that can be a bit of an exercise, because of
the variety of locations and naming schemes for the Java runtime on
different platforms. It may be simplest to do a filesystem search for
the name `libjvm.*` under the Java home directory (which is reported
by `mvn -v` assuming the JRE that you used for running Maven is the
one you intend to use at run time). _Todo: add details for Mac, which
may be different enough to be confusing._ _Todo: make this whole part
easier._

Once you have the three paths you need (the `libjvm` path, the `pljava.jar`
path, and the PL/Java native library path), connect to a PostgreSQL database
(for testing, you might spin up a new one with no other users or data).
The database user you connect as must be a PostgreSQL superuser. Test PL/Java
with these SQL commands:

```
SET pljava.libjvm_location TO ' use the libjvm path here ';
SET pljava.classpath TO ' use the pljava.jar path here ';
LOAD ' use the PL/Java native library path here ';
```
If you see

    NOTICE: PL/Java loaded

you have succeeded.
